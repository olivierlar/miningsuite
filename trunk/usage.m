% Some examples of what you can tryhelp miningsuitea = sig.input('ragtime.wav','Extract',0,4,'s')% Loads file 'ragtime.wav' and extracts the first minute, and stores the result in variable a.% Note that if you add a semi-colon (';') at the end, the operation is not performed but the data flow is simply designed.sig.input('Folder')% Performs the given operation on all the files in the Current Directory.a = sig.input(a, 'Center'); % Centers the previous waveform already computed (a). But you can also% write all in one single command:a = sig.input('ragtime.wav', 'Extract', 0, 4, 's', 'Center');a.getdata% Returns any result in a Matlab array.a.show% Show the data flow that has been stored, with all options.sig.input('ragtime.wav', 'Mix', 'no')% Keeps the multitrack decomposition.b = sig.input(a, 'Sampling', 1024)% Resamples at rate r (in Hz.)sig.input (a, 'Trim')% Trims (pseudo-)silence at start and end.sig.input(a, 'Trim', 'JustStart')% Trims at start only.b = sig.input(a, 'Trim', 'JustEnd', 'TrimThreshold', .2)% Trims at end only, with pseudo-silence considered as below 20% of max% RMS in the whole signal.b.play% Plays the resulting waveform.f = sig.frame('ragtime.wav', 'FrameSize', 1, 'FrameHop', .5)% Decomposes into frames of length 1 s, and half-overlapping.b = sig.spectrum(a,'dB')% Computes FFT spectrum in dB scale of the variable a defined in previous line.sig.spectrum(f)% orsig.spectrum(a,'Frame','dB','FrameHop', 3, 'Hz')% Computes FFT spectrogramaud.spectrum('ragtime.wav','Mel','Frame')% Mel spectrummus.spectrum('ragtime.wav','Cents','Collapsed')% Spectrum decomposed into cents, collapsed in one octavesig.cepstrum('ragtime.wav','frame','Freq')% Cepstrum represented in frequency domainsig.autocor('ragtime.wav','Frame','Min',.002,'Max',.02,'Freq','Window',...            'rectangular','NormalWindow','Yes','Compres',.7)% Autocorrelation function displayed on the frequency domain, normalised by% its window, generalizeds = sig.spectrum('ragtime.wav','Frame');sig.flux(s)c = sig.cepstrum('ragtime.wav','Frame');sig.flux(c)% Spectral flux, cepstral flux, etc.sig.rms('ragtime.wav','Frame')% Root-mean squaree = sig.envelope('ragtime','Hilbert','Filtertype','IIR','Tau',.05,...    'PostDecim',8,'Center','Power','Normal','Smooth')% Extract the power energy envelope from the audio waveform with Hilbert% transform, using Infinite Impulse Response low-pass filtering with time% constant .05 s, with down sampling by a factor 8, centering, normalised% to 1, smoothed.aud.envelope('ragtime.wav')% Auditory modelling of envelope with mu-law compression and mix with its% temporal derivatesac = sig.autocor(e,'Max',5)% Computes autocorrelation function on the envelope curve.sig.peaks(ac)% Detects peaks on the autocorrelation function.ac = sig.autocor(e,'Max',5,'FrameSize',3,'FrameHop',.5)sig.peaks(ac)sig.filterbank('ragtime.wav', 'CutOff', [-Inf 200 400 800 1600 Inf])% Decomposed the signal into 5 channels using a bank of filters, the first% one being low-pass and the last one high-pass.f = aud.filterbank('ragtime.wav','NbChannels',5)% Gammatone filterbank decomposition in 5 channelsaud.filterbank('ragtime.wav','Mel')% Mel-band filterbank decompositione = sig.envelope(f)a = sig.autocor(e)s = sig.sum(a)% Extract envelope on each channel, and compute autocorrelation function,% and sum back the channels.sig.peaks(s,'Total',2,'NoBegin')% Selects the 2 highest peaks, but not taking the one at the beginning of% the curve.s = sig.segment('ragtime.wav',[1 2 3])% Segments the waveform on specific time points.s.playsig.spectrum(s)e = sig.envelope('ragtime.wav')p = sig.peaks(e)s = sig.segment('ragtime.wav',p)s = aud.score('ragtime.wav')% Onset detectionaud.eventdensity(s)% Number of events per secondsig.zerocross('ragtime.wav','Frame')% Zero-crossing ratesig.rolloff('ragtime.wav','Frame','Threshold',.9)% High-frequency energyaud.brightness('ragtime.wav','Frame','CutOff',4000)% Brightnessaud.mfcc('ragtime.wav','Frame')% Mel-frequency cepstral coefficientsaud.roughness('ragtime.wav','Frame')% Sensory dissonanceaud.pitch('ragtime.wav','Frame','2Channels','Generalized',.7)% Pitch extraction using 2-channel filterbank and generalized% autocorrelation functionaud.pitch('ragtime.wav','Frame','Total',1,'Max',400)% Monodic pitch extraction in the frequency range below 400 Hzaud.fluctuation('ragtime.wav')% Fluctuation diagramaud.fluctuation('ragtime.wav','Summary')% Fluctuation summarymus.tempo('ragtime.wav')mus.tempo('ragtime.wav','FrameSize',1)% Estimates tempo.% There are more audio features available. They will be added here soon.% Check ISMIR2014poster.pdf%%mus.score('laksin.mid')% Loads and displays a MIDI file.mus.tempo('laksin.mid')% Estimates tempo from a MIDI file, using the same audio-based method as for the audio file.m = mus.score('laksin.mid','Notes',1:10)% Loads only the first ten notes of the MIDI file.m = mus.score('laksin.mid','EndTime',5)% Loads only the first five seconds of the MIDI file.mus.score(m,'Metre')% Constructs a beat structure on the MIDI file.mus.tempo('laksin.mid','Pattern')% Estimates tempo based on that beat structure approach.mus.score('laksin.mid','Mode')% Estimates mode on the MIDI file, and uses the information for pitch spelling.% There are more symbolic features available. They will be added here soon.% Check ISMIR2014poster.pdf