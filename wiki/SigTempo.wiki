#summary sig.tempo: Tempo estimation

= sig.tempo: Tempo estimation =

Estimates the tempo by detecting periodicities from the onset detection curve.

== 1. Classical Version ==
The classical paradigm for tempo estimation is based on detecting periodicities in a range of BPMs, and choosing the maximum periodicity score for each frame separately.

Tempo estimation is carried out in several steps:

  * The onset detection curve computed in mironsets can be controlled using the following options:  
   * ‘Envelope’ (default) and ‘DiffEnvelope’:
    * with the ‘Method’ set by default to ‘Filter’:
     * with ‘FilterType’ option with same default,
     * with ‘Filterbank’ option set to 10 by default,
     * with ‘FilterbankType’ option with same default,
    * ‘Method’ can be set to ‘Spectro’ as well, and the 'Freq','Mel','Bark','Cents' selection can be specified, with same default.
    * Besides ‘Method’: ‘HalfwaveCenter’, ‘HalfwaveDiff’, ‘Lambda’, ‘Center’, ‘Smooth’, ‘Sampling’, ‘Log’ and ‘Mu’, all with same default and ‘Diff’ set to ‘On’ by default.
   * ‘SpectralFlux’: with ‘Complex’, ‘Inc’, ‘Median’ and ‘Halfwave’ with same default.
   *  ‘Pitch’ and ‘Novelty’.

Other options related to mironsets can be specified:
   * ‘Filterbank’, with same default value than for mironsets,
   * mironsets(..., 'Sum’, w) specifies when to sum the channels. Possible values:
    * w = 'Before’: sum before the autocorrelation or spectrum computation.
    * w = 'After’: autocorrelation or spectrum computed for each band, and summed into a "summary".
    * w = 0: tempo estimated for each band separately, with no channel recombination.

  * mirtempo(..., ‘Frame’, ...) optionally performs a frame decomposition of the onset curve, with by default a frame length of 3 s and a hop factor of 10% (0.3 s). For the specification of other frame configuration using additional parameters, cf. the previous mirframe vs. ‘Frame’ section.
  * Periodicities are detected on the onset detection curve based on several possible strategies:  
   * mirtempo(..., ‘Autocor’) computes an autocorrelation function of the onset detection curve, using mirautocor (default choice). Options related to mirautocor can be specified:
    * 'Enhanced’ (toggled on by default^2^ here),
    * 'Resonance’ (set by default to ‘ToiviainenSnyder’),
    * ‘NormalWindow’ (same default value).
   * mirtempo(..., ‘Spectrum’) computes a spectral decomposition of the onset detection curve, using mirspectrum. Options related to mirspectrum can be passed here as well: 
    * 'ZeroPad’ (set by default here to 10 000 samples),
    * 'Prod’ (same default, when toggled on, as for mirspectrum),
    * 'Resonance’ either ‘ToiviainenSnyder’ (default value) or 0, ‘off’, or ‘no’.
   * mirtempo(..., ‘Autocor’, ‘Spectrum’) combines both strategies: the autocorrelation function is translated into the frequency domain in order to be compared to the spectrum curve, and the two curves are subsequently multiplied.
  * A peak picking is applied to the autocorrelation function or to the spectrum representation. The parameters of the peak picking can be tuned:
   * mirtempo(..., ‘Total’, m) selects not only the best tempo, but the m best tempos.
   * mirtempo(..., ‘Min’, mi) indicates the lowest tempo taken into consideration, expressed in bpm. Default value: 40 bpm.
   * mirtempo(..., ‘Max’, ma) indicates the highest tempo taken into consideration, expressed in bpm. Default value: 200 bpm.
   * mirtempo(..., ‘Track’, t) tracks peaks along time, in order to obtain a stabilized tempo curve and to limit therefore switches between alternative pulsations. Default value when option toggled on: t = 0.1 s. When ‘Track’ is toggled on, ‘Enhanced’ is forced to off.
   * mirtempo(..., ‘Contrast’, c) specifies the contrast factor for the peak picking. Default value: c = 0.1
   * mirtempo(..., ‘Nearest’, n) chooses the peak closest to n (in s.). Default value when option toggled on: n = 0.5 s.

  ^2^ except when ‘Track’ option is used, as explained.

When ‘Track’ is used for academic research, please cite the following publication:
||Olivier Lartillot, “mirtempo: Tempo estimation through advanced frame-by-frame peaks tracking”, Music Information Retrieval Evaluation eXchange (MIREX 2010).||



mirtempo accepts as input data type either:
  * mirautocor objects,
  * mirspectrum objects,
  * onset detection curve (resulting from mironsets), frame-decomposed or not, channel-decomposed or not,
  * and all the input data accepted by mironsets.

mirtempo can return several outputs:
  # the tempo itself (or set of tempi) and
  ## the mirspectrum or  mirautocor data, where is highlighted the (set of) peak(s) corresponding to the estimated tempo (or set of tempi).

The tempo estimation related to the ragtime example 
{{{
[t ac] = mirtempo(‘ragtime’)
}}}
leads to a tempo t = 129.1832 bpm and to the following autocorrelation curve ac:

The frame-decomposed tempo estimation related to the czardas example
{{{
[t ac] = mirtempo(‘czardas’, ‘Frame’)
}}}

leads to the following tempo curve t:

and the following autocorrelation frame decomposition ac:

￼Below are the results of the analysis of a more challenging example: the first seconds of the first movement of a performance of J.S. Bach’s  Brandenburg concert No.2 in F Major, BWV 1047:

￼￼The classical method generates a tempo curve with a lot of shifts from one metrical level to another.

== 2. Metre-Based Version ==

mirtempo(..., ‘Metre’) tracks tempo by building a hierarchical metrical structure (using mirmetre). This enables to find coherent metrical levels leading to a continuous tempo curve.

When the ‘Metre’ option is used for academic research, please cite the following publication:

||Lartillot, O., Cereghetti, D., Eliard, K., Trost, W. J., Rappaz, M.-A., Grandjean, D., "Estimating tempo and metrical features by tracking the whole metrical hierarchy", 3rd International Conference on Music & Emotion, Jyväskylä, 2013.||

mirtempo(..., ‘Metre’) accepts as input data type either:
  * mirautocor objects,
  * onset detection curve (resulting from mironsets), frame-decomposed or not, channel-decomposed or not,
  * and all the input data accepted by mironsets.

mirtempo(..., ‘Metre’) can return several outputs:
# the tempo itself and
## the mirmetre representation.

Below are the results of the analysis of the same excerpt of J.S. Bach’s  Brandenburg concert No.2 in F Major, BWV 1047, this time using the ‘Metre’ option:

The metrical structure built using the ‘Metre’ strategy enables to find coherent metrical levels leading to a continuous tempo curve.

== Tempo Change ==
mirtempo(..., ‘Change’) computes the difference between successive values of the tempo curve. Tempo change is expressed independently from the choice of a metrical level by computing the ratio of tempo values between successive frames, and is expressed in logarithmic scale (base 2), so that no tempo change gives a value of 0, increase of tempo gives positive value, and decrease of tempo gives negative value.