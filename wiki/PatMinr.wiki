#summary Overall description of the architecture of PatMinr module.

= _PatMinr_ module =

 Overall description of the architecture

== Classes ==

`pat.occurrence`: PatOccurrence


== How it works ==


=== `mus.minr`:`Process_notes`===

Each note:

 * `mus.minr`:`Process` note


=== `mus.minr`:`Process` note ===

Each previous note syntagmatically leading to the note:

 * `pat.syntagm` previous note -> current note

 * Create a `pat.occurrence` of the elementary note pattern and call `memorize` Ã¸->syntagm (cf. below)

=== `pat.syntagm` previous -> current ===

Each cycle ending at the start of the syntagmatic relation:

 * `memorize` cycle -> syntagm with generalization

Each pattern occurrence ending at the start of the syntagmatic relation (ordered in decreasing order of specificity):

 * `memorize` occurrence -> syntagm without generalization

Each pattern occurrence ending at the start of the syntagmatic relation (ordered in decreasing order of specificity):

 * `memorize` occurrence -> syntagm with generalization

=== `memorize` occurrence -> syntagm ===