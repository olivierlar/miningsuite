#summary Overall description of the architecture of PatMinr module.

= _PatMinr_ module =

 Overall description of the architecture

== Classes ==

`pat.occurrence`: PatOccurrence

== How it works ==

`mus.minr`:`Process_notes`:

Each note:
	`mus.minr`:`Process`:

  	Each syntagmatic relation:

		`pat.syntagm`:

		Each cycle ending at the start of the syntagmatic relation:

			`memorize` cycle->syntagm with generalization (cf. below)

		Each pattern occurrence ending at the start of the syntagmatic relation (ordered in decreasing order of specificity):

			`memorize` occurrence->syntagm without generalization (cf. below)

		Each pattern occurrence ending at the start of the syntagmatic relation (ordered in decreasing order of specificity):

			`memorize` occurrence->syntagm with generalization (cf. below)

	Create a `pat.occurrence` of the elementary note pattern and call `memorize` Ã¸->syntagm (cf. below)


`memorize` occurrence->syntagm: