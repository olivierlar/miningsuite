#summary Overall description of the architecture of PatMinr module.

= _PatMinr_ module =

 Overall description of the architecture

== Classes ==

`pat.occurrence`: PatOccurrence

to be continuedâ€¦


== How it works ==

=== `mus.minr`:`Process_notes`===

Each note:

 * `mus.minr`:`Process` note


=== `mus.minr`:`Process` note ===

Each previous note syntagmatically leading to the note:

 * `pat.syntagm` previous note -> current note

 * Create a `pat.occurrence` of the elementary note pattern and call `memorize` Ã¸ -> syntagm (cf. below)

=== `pat.syntagm` previous -> current ===

Constructs a syntagmatic relation between previous and current note.

Tries to extend all the pattern occurrences (including cycles) ending at the previous note with the new syntagmatic relation, with the following order:

 * First, extends cycles: Call `memorize` cycle -> syntagm with generalization.

 * Then, extends the set of pattern occurrences ordered in decreasing order of specificity, by first calling `memorize` occurrence -> syntagm on each of them without generalization, and then calling once again `memorize` occurrence -> syntagm on each of them but this time with generalization.

=== `memorize` occurrence -> syntagm ===