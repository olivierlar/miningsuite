#summary sig.keyclass: Probability of key candidates

= sig.keyclass: Probability of key candidates =

mirkeystrength computes the key strength, a score between -1 and +1 associated with each possible key candidate, through a cross-correlation of the chromagram returned by mirchromagram, wrapped and normalized (using the ‘Normal’ option), with similar profiles representing all the possible tonality candidates (Krumhansl, 1990; Gomez, 2006).

https://miningsuite.googlecode.com/svn/wiki/SigKeyclass_ex1.png

The resulting graph indicate the cross-correlation score for each different tonality candidate.

https://miningsuite.googlecode.com/svn/wiki/SigKeyclass_ex2.png
<br><br>


== Flowchart Interconnections ==

For the moment, only the ‘Weight’ and ‘Triangle’ options used in mirchromagram can be tuned directly in mirkeystrength.

mirkeystrength accepts either:
  * mirchromagram objects,<p>
  * mirspectrum objects,<p>
  * miraudio objects (same as for mirchromagram),<p>
  * file name or the ‘Folder’ keyword.
<br>

mirkeystrength can return several outputs:
  * the key strength itself, and<p>
  * the mirchromagram data.
<br>

== Frame decomposition ==

mirkeystrength(..., ‘Frame’, ...) performs first a frame decomposition, with by default a frame length of 200 ms and a hop factor of 5% (10 ms). For the specification of other frame configuration using additional parameters, cf. the previous mirframe vs. ‘Frame’ section.

<br>
== Example ==
{{{
mirkeystrength(‘ragtime’,‘Frame’)
}}}

https://miningsuite.googlecode.com/svn/wiki/SigKeyclass_ex3.png

<br>
== Accessible Output ==

cf. §5.2 for an explanation of the use of the get method. Specific fields:

  * ‘Strength’: the key strength value for each key and each temporal position (same as ‘Data’). The resulting matrix is distributed along two layers along the fourth dimension: a first layer for major keys, and a second layer for minor keys.<p>
  * ‘Tonic’: the different key centres (same as ‘Pos’).