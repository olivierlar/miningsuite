#summary sig.autocor: Autocorrelation function

= sig.autocor: Autocorrelation function =

Another way to evaluate periodicities in signals (be it an audio waveform, a spectrum, an envelope, etc.) consists in looking at local correlation between samples. If we take a signal x, such as for instance this trumpet sound:
￼

the autocorrelation function is computed as follows:


For a given lag j, the autocorrelation Rxx(j) is computed by multiplying point par point the signal with a shifted version of it of j samples. We obtain this curve:

Hence when the lag j corresponds to a period of the signal, the signal is shifted to one period ahead, and therefore is exactly superposed to the original signal. Hence the summation gives very high value, as the two signals are highly correlated.


== Flowchart Interconnections ==

mirautocor usually accepts either:

  * file name or the ‘Folder’ keyword, 
  * miraudio objects, where the audio waveform can be segmented (using mirsegment), decomposed into channels (using mirfilterbank), and/or decomposed into frames (using mirframe),
  * mirspectrum objects,
  * data in the onset detection curve category (cf. mironsets):
   * mirenvelope objects, frame-decomposed or not,
   * fluxes (cf. mirflux), frame-decomposed or not,
  * mirautocor objects, for further processing.


== Frame decomposition ==

mirautocor(..., ‘Frame’, ...) performs first a frame decomposition, with by default a frame length of 50 ms and half overlapping. For the specification of other frame configuration using additional parameters, cf. the previous mirframe vs. ‘Frame’ section.


== Parameters specification ==

  * mirautocor(..., ‘Min’, mi) indicates the lowest delay taken into consideration. Default value: 0 s. The unit can be specified:
   * mirautocor(..., ‘Min', mi, ‘s’) (default unit)
   * mirautocor(..., ‘Min’, mi, ‘Hz’)

  * mirautocor(..., ‘Max’, ma) indicates the highest delay taken into consideration. The unit can be specified as for 'Min’. Default value:
   * if the input is an audio waveform, the highest delay is by default 0.05 s (corresponding to a minimum frequency of 20 Hz).
   * if the input is an envelope, the highest delay is by default 2 s.

  * mirautocor(..., ‘Normal’, n) specifies a normalization option for the cross-correlation (‘biased’, ‘unbiased’, ‘coeff’, ‘none’). This corresponds exactly to the normalization options in Matlab xcorr function, as mirautocor actually calls xcorr for the actual computation. The default value is ‘coeff’,  corresponding to a normalization so that the autocorrelation at zero lag is identically 1. If the data is multi-channel, the normalization is such that the sum over channels at zero lag becomes identically 1. Note however that the ‘coeff’ routine is not used when the compression (‘Compres’) factor k is not equal to 2 (see below).


== Post-processing options ==

  * mirautocor(...,‘Freq’) represents the autocorrelation function in the frequency domain: the periods are expressed in Hz instead of seconds (see the last curve in the figure below for an illustration).

  * mirautocor(..., ‘NormalWindow’) divides the autocorrelation by the autocorrelation of the window. Boersma (1993) shows that by default the autocorrelation function gives higher coefficients for small lags, since the summation is done on more samples. Thus by dividing by the autocorrelation of the window, we normalize all coefficients in such a way that this default is completely resolved. At first sight, the window should simply be a simple rectangular window. But Boersma (1993) shows that it is better to use ‘hanning’ window in particular, in order to obtain better harmonic to noise ratio.
   * mirautocor(..., ‘NormalWindow’, w) specifies the window to be used, which can be any window available in the Signal Processing Toolbox. Besides w = ‘rectangular’ will not perform any particular windowing (corresponding to a rectangular (“invisible”) window), but the normalization of the autocorrelation by the autocorrelation of the invisible window will be performed nonetheless. The default value is w = ‘hanning’. 
   * mirautocor(..., ‘NormalWindow’, ‘off’) toggles off this normalization (which is ‘on’ by default).

  * mirautocor(..., ‘Resonance’, r) multiplies the autocorrelation curve with a resonance curve that emphasizes pulsations that are more easily perceived.  Two resonance curves are proposed:
   * r = ‘ToiviainenSnyder’ (Toiviainen & Snyder 2003) (default value if ‘Resonance’ option toggled on),
   * r = ‘vanNoorden’ (van Noorden & Moelants, 1999).
 This option should be used only when the input of the mirautocor function is an amplitude envelope, i.e., a mirenvelope object.
 * mirautocor(..., ‘Center’, c)  assigns the center value of the resonance curve, in seconds. Works mainly with 'ToiviainenSnyder' option. Default value: c = 0.5.